// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  isActive       Boolean  @default(false)
  verifyToken    String   @unique
  image          String?
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  loginId        String?

  teams     Team[]
  venues    Venue[]
  matches   Match[]
  batting   Batting[]
  bowling   Bowling[]
  SavedTeam SavedTeam[]
  Fixers    Fixers[]
}

model Scores {
  id Int @id @default(autoincrement())

  Team   Team   @relation(fields: [teamId], references: [teamId])
  teamId String

  runs         Int
  wickets      Int
  oppCountryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId Int
}

enum Bool {
  yes
  no
}

model Team {
  id       Int    @id @default(autoincrement())
  teamName String
  teamId   String @unique
  teamType String @default("national")
  active   Bool?  @default(yes)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  matchesA Match[] @relation("teamA")
  matchesB Match[] @relation("teamB")

  User   User   @relation(fields: [userId], references: [id])
  userId String

  batting          Batting[]
  bowling          Bowling[]
  Scores           Scores[]
  playerTeams      PlayerTeam[]
  rank             Rank[]
  savedTeamA       SavedTeam[]        @relation("teamA")
  savedTeamB       SavedTeam[]        @relation("teamB")
  savedTeamPlayers SavedTeamPlayers[]
  FixersTeamA      Fixers[]           @relation("teamA")
  FixersTeamB      Fixers[]           @relation("teamB")
}

model Venue {
  id             Int     @id @default(autoincrement())
  venueId        String  @unique
  venueName      String
  venueCountryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  matches   Match[]
  batting   Batting[]
  bowling   Bowling[]
  SavedTeam SavedTeam[]

  User   User     @relation(fields: [userId], references: [id])
  userId String
  Fixers Fixers[]
}

enum MatchFormat {
  ODI
  T20
  IPL
  SS
  BBL
  SA20
  ILT20
  WPL
  PSL
}

enum MatchType {
  MEN
  WOMEN
  U19
}

model Match {
  id          Int         @id @default(autoincrement())
  matchFormat MatchFormat
  matchType   MatchType?  @default(MEN)

  teamA   Team   @relation("teamA", fields: [teamAId], references: [teamId])
  teamAId String

  teamB   Team   @relation("teamB", fields: [teamBId], references: [teamId])
  teamBId String

  result String?

  batFirst  String
  matchDate DateTime @db.Date

  venue   Venue  @relation(fields: [venueId], references: [venueId])
  venueId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  batting Batting[]
  bowling Bowling[]
  Scores  Scores[]
  rank    Rank[]
}

enum PlayerType {
  Batsman
  Bowler
  AllRounder
  NA
}

enum BowlingType {
  Fast
  Spin
  NA
}

model Player {
  playerId    String       @id @unique
  playerName  String
  playerType  PlayerType?
  description String?
  bowlingType BowlingType?
  inactive    Bool?
  playerTeams PlayerTeam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  batting          Batting[]
  bowling          Bowling[]
  rank             Rank[]
  savedTeamPlayers SavedTeamPlayers[]
}

// Many-to-Many
model PlayerTeam {
  team   Team   @relation(fields: [teamId], references: [teamId])
  teamId String

  player   Player @relation(fields: [playerId], references: [playerId])
  playerId String
  active   Bool   @default(yes)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([playerId, teamId])
  @@unique([teamId, playerId])
}

model Batting {
  id Int @id @default(autoincrement())

  oppCountryId String
  run          Int
  four         Int
  six          Int
  strikeRate   Float
  matchDate    DateTime    @db.Date
  matchFormat  MatchFormat
  f11points    Int?
  battingOrder Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  venue   Venue  @relation(fields: [venueId], references: [venueId])
  venueId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Player   Player @relation(fields: [playerId], references: [playerId])
  playerId String

  Match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId Int

  Team   Team   @relation(fields: [teamId], references: [teamId])
  teamId String
}

model Bowling {
  id Int @id @default(autoincrement())

  oppCountryId String
  maiden       Int
  wicket       Int
  eco          Float
  matchDate    DateTime    @db.Date
  matchFormat  MatchFormat
  f11points    Int?
  bowlingOrder Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  venue   Venue  @relation(fields: [venueId], references: [venueId])
  venueId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Player   Player @relation(fields: [playerId], references: [playerId])
  playerId String

  Match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId Int

  Team   Team   @relation(fields: [teamId], references: [teamId])
  teamId String

  wicketType String?
}

model Rank {
  id Int @id @default(autoincrement())

  f11points Int
  rank      Int

  Player   Player @relation(fields: [playerId], references: [playerId])
  playerId String
  Match    Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId  Int
  Team     Team   @relation(fields: [teamId], references: [teamId])
  teamId   String
}

model SavedTeam {
  id          String      @id @default(uuid())
  teamName    String?
  matchFormat MatchFormat
  shortUrl    String?     @unique

  venue   Venue?  @relation(fields: [venueId], references: [venueId])
  venueId String?

  teamA   Team   @relation("teamA", fields: [teamAId], references: [teamId])
  teamAId String

  teamB   Team   @relation("teamB", fields: [teamBId], references: [teamId])
  teamBId String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  savedTeamPlayers SavedTeamPlayers[]
}

enum SavedTeamStatus {
  selected
  stared
}

model SavedTeamPlayers {
  id Int @id @default(autoincrement())

  Player   Player          @relation(fields: [playerId], references: [playerId])
  playerId String
  status   SavedTeamStatus

  SavedTeam   SavedTeam @relation(fields: [savedTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  savedTeamId String
  Team        Team      @relation(fields: [teamId], references: [teamId])
  teamId      String
}

model Fixers {
  id          Int         @id @default(autoincrement())
  matchFormat MatchFormat

  teamA   Team   @relation("teamA", fields: [teamAId], references: [teamId])
  teamAId String

  teamB   Team   @relation("teamB", fields: [teamBId], references: [teamId])
  teamBId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  venue   Venue?  @relation(fields: [venueId], references: [venueId])
  venueId String?
}
