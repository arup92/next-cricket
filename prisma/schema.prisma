// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  isActive       Boolean  @default(false)
  verifyToken    String   @unique
  image          String?
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  loginId        String?

  teams   Team[]
  venues  Venue[]
  matches Match[]
  batting Batting[]
  bowling Bowling[]
}

model Scores {
  id Int @id @default(autoincrement())

  Team   Team   @relation(fields: [teamId], references: [teamId])
  teamId String

  runs         Int
  wickets      Int
  oppCountryId String

  Match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId Int
}

model Team {
  id       Int    @id @default(autoincrement())
  teamName String
  teamId   String @unique

  matchesA Match[] @relation("teamA")
  matchesB Match[] @relation("teamB")
  results  Match[] @relation("result")

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  batting Batting[]
  bowling Bowling[]
  Scores  Scores[]
}

model Venue {
  id             Int     @id @default(autoincrement())
  venueId        String  @unique
  venueName      String
  venueCountryId String?

  matches Match[]
  batting Batting[]
  bowling Bowling[]

  User   User   @relation(fields: [userId], references: [id])
  userId String
}

enum MatchFormat {
  ODI
  T20
  IPL
}

model Match {
  id          Int         @id @default(autoincrement())
  matchFormat MatchFormat

  teamA   Team   @relation("teamA", fields: [teamAId], references: [teamId])
  teamAId String

  teamB   Team   @relation("teamB", fields: [teamBId], references: [teamId])
  teamBId String

  matchResult Team   @relation("result", fields: [result], references: [teamId])
  result      String

  batFirst  String
  matchDate DateTime @db.Date

  venue   Venue  @relation(fields: [venueId], references: [venueId])
  venueId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  batting Batting[]
  bowling Bowling[]
  Scores  Scores[]
}

enum PlayerType {
  Batsman
  Bowler
  AllRounder
  NA
}

enum BowlingType {
  Fast
  Spin
  NA
}

model Player {
  playerId        String       @id @unique
  playerName      String
  playerCountryId String
  playerType      PlayerType?
  description     String?
  bowlingType     BowlingType?

  batting Batting[]
  bowling Bowling[]
}

model Batting {
  id Int @id @default(autoincrement())

  oppCountryId String
  run          Int
  four         Int
  six          Int
  strikeRate   Float
  matchDate    DateTime    @db.Date
  matchFormat  MatchFormat
  f11points    Int?

  venue   Venue  @relation(fields: [venueId], references: [venueId])
  venueId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Player   Player @relation(fields: [playerId], references: [playerId])
  playerId String

  Match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId Int

  Team   Team   @relation(fields: [teamId], references: [teamId])
  teamId String
}

model Bowling {
  id Int @id @default(autoincrement())

  oppCountryId String
  maiden       Int
  wicket       Int
  eco          Float
  matchDate    DateTime    @db.Date
  matchFormat  MatchFormat
  f11points    Int?

  venue   Venue  @relation(fields: [venueId], references: [venueId])
  venueId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Player   Player @relation(fields: [playerId], references: [playerId])
  playerId String

  Match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId Int

  Team   Team   @relation(fields: [teamId], references: [teamId])
  teamId String
}
